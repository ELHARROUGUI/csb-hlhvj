{"version":3,"sources":["components/Square.js","components/Grid.js","App.js","utils/helpers.js","index.js"],"names":["style","background","border","fontSize","fontWeight","cursor","outline","Square","value","onClick","borderRadius","width","height","margin","display","gridTemplate","Grid","squares","map","square","i","App","useState","Array","fill","grid","setGrid","playerX","setPlayerX","winner","lines","length","a","b","c","calculateWinner","className","gridCopy","rootElement","document","getElementById","ReactDOM","render"],"mappings":"qMAAMA,EAAQ,CACZC,WAAY,YACZC,OAAQ,qBACRC,SAAU,OACVC,WAAY,MACZC,OAAQ,UACRC,QAAS,QAUIC,EANA,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,QAAV,OACb,wBAAQT,MAAOA,EAAOS,QAASA,EAA/B,SACGD,KCVCR,EAAQ,CACZE,OAAQ,qBACRQ,aAAc,OACdC,MAAO,QACPC,OAAQ,QACRC,OAAQ,SACRC,QAAS,OACTC,aAAc,mCAYDC,EARF,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASR,EAAZ,EAAYA,QAAZ,OACX,qBAAKT,MAAOA,EAAZ,SACGiB,EAAQC,KAAI,SAACC,EAAQC,GAAT,OACX,cAAC,EAAD,CAAgBZ,MAAOW,EAAQV,QAAS,kBAAMA,EAAQW,KAAzCA,SCXJ,SAASC,IACtB,MAAwBC,mBAASC,MAAM,GAAGC,KAAK,OAA/C,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACMC,ECRuB,SAACZ,GAW9B,IAVA,IAAMa,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAV,EAAI,EAAGA,EAAIU,EAAMC,OAAQX,IAAK,CACrC,kBAAkBU,EAAMV,GAAxB,GAAOY,EAAP,KAAUC,EAAV,KAAaC,EAAb,KACA,GAAIjB,EAAQe,IAAMf,EAAQe,KAAOf,EAAQgB,IAAMhB,EAAQe,KAAOf,EAAQiB,GACpE,OAAOjB,EAAQe,GAGnB,OAAO,KDTQG,CAAgBV,GAgB/B,OACE,sBAAKW,UAAU,MAAf,UACE,mDACA,cAAC,EAAD,CAAMnB,QAASQ,EAAMhB,QAbL,SAACW,GACnB,IAAMiB,EAAQ,YAAOZ,GAEjBI,GAAUQ,EAASjB,KAEvBiB,EAASjB,GAAKO,EAAU,IAAM,IAC9BD,EAAQW,GACRT,GAAYD,OAOV,gCACE,4BACGE,EACG,WAAaA,EACb,iBAAmBF,EAAU,IAAM,OAEzC,wBAAQlB,QAzBE,WACdiB,EAAQH,MAAM,GAAGC,KAAK,OACtBI,GAAW,IAuBP,yBE7BR,IAAMU,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,cAAC,aAAD,UACE,cAACrB,EAAD,MAEFiB,K","file":"static/js/main.11f93f8a.chunk.js","sourcesContent":["const style = {\r\n  background: \"lightblue\",\r\n  border: \"2px solid darkblue\",\r\n  fontSize: \"30px\",\r\n  fontWeight: \"800\",\r\n  cursor: \"pointer\",\r\n  outline: \"none\"\r\n};\r\n\r\n//need valid props\r\nconst Square = ({ value, onClick }) => (\r\n  <button style={style} onClick={onClick}>\r\n    {value}\r\n  </button>\r\n);\r\n\r\nexport default Square;\r\n","import Square from \"./Square\";\r\n\r\nconst style = {\r\n  border: \"4px solid darkblue\",\r\n  borderRadius: \"10px\",\r\n  width: \"250px\",\r\n  height: \"250px\",\r\n  margin: \"0 auto\",\r\n  display: \"grid\",\r\n  gridTemplate: \"repeat(3, 1fr) / repeat(3, 1fr)\"\r\n};\r\n\r\n//need valid props\r\nconst Grid = ({ squares, onClick }) => (\r\n  <div style={style}>\r\n    {squares.map((square, i) => (\r\n      <Square key={i} value={square} onClick={() => onClick(i)} />\r\n    ))}\r\n  </div>\r\n);\r\n\r\nexport default Grid;\r\n","import { useState } from \"react\";\nimport \"./styles.css\";\nimport Grid from \"./components/Grid\";\nimport { calculateWinner } from \"./utils/helpers\";\n\nexport default function App() {\n  const [grid, setGrid] = useState(Array(9).fill(null));\n  const [playerX, setPlayerX] = useState(true);\n  const winner = calculateWinner(grid);\n  const onReset = () => {\n    setGrid(Array(9).fill(null));\n    setPlayerX(true);\n  };\n\n  const handleClick = (i) => {\n    const gridCopy = [...grid];\n    // If user click an occupied square or if game is won, return\n    if (winner || gridCopy[i]) return;\n    // Put an X or an O in the clicked square\n    gridCopy[i] = playerX ? \"X\" : \"O\";\n    setGrid(gridCopy);\n    setPlayerX(!playerX);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Hello CodeSandbox</h1>\n      <Grid squares={grid} onClick={handleClick} />\n      <div>\n        <p>\n          {winner\n            ? \"Winner: \" + winner\n            : \"Next Player: \" + (playerX ? \"X\" : \"O\")}\n        </p>\n        <button onClick={onReset}>reset</button>\n      </div>\n    </div>\n  );\n}\n","export const calculateWinner = (squares) => {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6]\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n};\r\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}